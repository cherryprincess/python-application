name: Build and Deploy to AKS

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY_NAME: ${{ secrets.REGISTRY_LOGIN_SERVER }}
  CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  CLUSTER_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
  NAMESPACE: github_copilot_ns

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build-id: ${{ steps.build-info.outputs.build-id }}
      image-tag: ${{ steps.build-info.outputs.image-tag }}
    
    steps:
    - name: Setup job
      run: |
        echo "Starting CI/CD pipeline for Python Flask application"
        echo "Build triggered by: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref_name }}"
    
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate build information
      id: build-info
      run: |
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
        BUILD_ID="${{ github.run_number }}-${SHORT_SHA}"
        IMAGE_TAG="$BUILD_ID"
        echo "build-id=$BUILD_ID" >> $GITHUB_OUTPUT
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Build ID: $BUILD_ID"
        echo "Image Tag: $IMAGE_TAG"
    
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az version
    
    - name: Install additional dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl wget
    
    - name: Install Trivy security scanner
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy
        trivy --version
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Python tests
      run: |
        python -c "import app; print('Application imports successfully')"
        echo "Basic application validation completed"
    
    - name: Azure Login
      run: |
        az login --service-principal \
          --username ${{ secrets.AZURE_CLIENT_ID }} \
          --password ${{ secrets.AZURE_CLIENT_SECRET }} \
          --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ secrets.REGISTRY_LOGIN_SERVER }} \
          --username ${{ secrets.REGISTRY_USERNAME }} \
          --password ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build Docker image
      run: |
        IMAGE_NAME="${{ env.REGISTRY_NAME }}/python-app:${{ steps.build-info.outputs.image-tag }}"
        echo "Building image: $IMAGE_NAME"
        docker build -t $IMAGE_NAME .
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
    
    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ env.IMAGE_NAME }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        timeout: '10m'
    
    - name: Push Docker image to ACR
      run: |
        echo "Pushing image: ${{ env.IMAGE_NAME }}"
        docker push ${{ env.IMAGE_NAME }}
        echo "Image pushed successfully"
    
    - name: Upload Kubernetes manifests
      uses: actions/upload-artifact@v4
      with:
        name: k8s-manifests
        path: k8s/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Setup deployment job
      run: |
        echo "Starting deployment to AKS"
        echo "Target namespace: ${{ env.NAMESPACE }}"
        echo "Image tag: ${{ needs.build.outputs.image-tag }}"
    
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az version
    
    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client
    
    - name: Download Kubernetes manifests
      uses: actions/download-artifact@v4
      with:
        name: k8s-manifests
        path: k8s/
    
    - name: Azure Login
      run: |
        az login --service-principal \
          --username ${{ secrets.AZURE_CLIENT_ID }} \
          --password ${{ secrets.AZURE_CLIENT_SECRET }} \
          --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Connect to AKS cluster
      run: |
        az aks get-credentials \
          --resource-group ${{ env.CLUSTER_RESOURCE_GROUP }} \
          --name ${{ env.CLUSTER_NAME }} \
          --overwrite-existing
        kubectl cluster-info
    
    - name: Create namespace if not exists
      run: |
        kubectl apply -f k8s/namespace.yaml || true
        kubectl get namespace ${{ env.NAMESPACE }}
    
    - name: Apply ConfigMap
      run: |
        kubectl apply -f k8s/configmap.yaml
        kubectl get configmap -n ${{ env.NAMESPACE }}
    
    - name: Apply NetworkPolicy
      run: |
        kubectl apply -f k8s/networkpolicy.yaml
    
    - name: Update deployment image
      run: |
        IMAGE_NAME="${{ env.REGISTRY_NAME }}/python-app:${{ needs.build.outputs.image-tag }}"
        sed -i "s|image: app_image|image: $IMAGE_NAME|g" k8s/deployment.yaml
        echo "Updated deployment with image: $IMAGE_NAME"
    
    - name: Apply Deployment
      run: |
        kubectl apply -f k8s/deployment.yaml
        kubectl rollout status deployment/python-app-deployment -n ${{ env.NAMESPACE }} --timeout=300s
    
    - name: Apply Service
      run: |
        kubectl apply -f k8s/service.yaml
        kubectl get service -n ${{ env.NAMESPACE }}
    
    - name: Verify deployment
      run: |
        echo "Deployment verification:"
        kubectl get pods -n ${{ env.NAMESPACE }} -l app=python-app
        kubectl get deployment -n ${{ env.NAMESPACE }}
        kubectl get service -n ${{ env.NAMESPACE }}
        
        echo "Waiting for pods to be ready..."
        kubectl wait --for=condition=ready pod -l app=python-app -n ${{ env.NAMESPACE }} --timeout=300s
        
        echo "Deployment completed successfully!"
    
    - name: Display deployment summary
      run: |
        echo "=== DEPLOYMENT SUMMARY ==="
        echo "Namespace: ${{ env.NAMESPACE }}"
        echo "Image: ${{ env.REGISTRY_NAME }}/python-app:${{ needs.build.outputs.image-tag }}"
        echo "Build ID: ${{ needs.build.outputs.build-id }}"
        echo "=========================="
